// Generated by dts-bundle-generator v8.0.1
export interface IPresenceObject {
	presenceId: string;
	presenceName: string;
	presenceText: string;
	basePresenceStatus: string;
	presenceColor: string | undefined;
	canUserSet: boolean;
}
export interface IPresence {
	/**
	 * @description
	 * This method is used to set the presence of the user.
	 * @param {string} presence - The presence of the user.
	 * @returns {Promise<void>} - Returns a promise.
	 * @memberof IPresence
	 * @example
	 * await sdk.Presence.setPresence({
	 * status: PresenceOptions.AVAILABLE,
	 * message: "Available"
	 * });
	 */
	setPresence(presenceId: string): Promise<void>;
	/**
	 * @description
	 * This method is used to get all presence options
	 * @returns {IPresenceObject[]} - Returns an array of presence options.
	 * @memberof IPresence
	 * @example
	 * const presenceOptions = sdk.Presence.getPresenceOptions();
	 * console.log(presenceOptions);
	 * // [ "Available", "Busy", "Away", "Offline", "Busy DND" ]
	 */
	getPresenceOptions(): Promise<IPresenceObject[]>;
	/**
	 * @description returns the current Presence of Agent
	 * @memberof IPresence
	 * @example
	 * sdk.presence.getPresence();
	 */
	getPresence(): Promise<IPresenceObject>;
}
export interface IConversationTransferOrEnd {
	liveWorkItemId: string;
	sessionId: string;
	transferDestination?: string;
}
export interface IConversationEventBase {
	liveWorkItemId: string;
}
declare enum SentimentState {
	NA = 0,
	VeryNegative = 7,
	Negative = 8,
	SlightlyNegative = 9,
	Neutral = 10,
	SlightlyPositive = 11,
	Positive = 12,
	VeryPositive = 13
}
export interface ISentimentObject extends IConversationEventBase {
	sessionId: string;
	sentiment: SentimentState;
}
export interface IAttachmentInfo {
	annotationid: string;
	filename: string;
	contentType: string;
}
export interface ITranscriptMessage {
	id: string;
	content: string;
	mode: "external" | "internal";
	createdOn: string;
	sender: {
		user: {
			displayName: string;
			id: string;
		};
	};
	attachmentInfo: IAttachmentInfo[];
}
export interface IConversation {
	/**
	 * @description Listen to sentiment change event
	 * @param callback
	 * @memberof IConversation
	 * @example
	 * sdk.conversation.onSentimentChange((data) => {
	 * console.log(data);
	 * });
	 */
	onCustomerSentimentChange(callback: (data: ISentimentObject) => void): string;
	/**
	 * @description Subscribes to conversationTransfer event
	 * @param callback
	 * @memberof {(data: IConversationTransfer) => {}} IConversation
	 * @example
	 * sdk.conversation.onTransfer((data: IConversationTransfer) => {
	 * console.log(data);
	 * });
	 */
	onTransfer(callback: (data: IConversationTransferOrEnd) => void): void;
	/**
	 * @description Subscribes to conversationLoaded event
	 * @param callback
	 * @memberof IConversation
	 * @example
	 * sdk.conversation.onConversationLoaded((data) => {
	 * console.log(data);
	 * });
	 */
	onConversationLoaded(callback: (data: any) => void): string;
	/**
	 * @external
	 * @description method to get transcript of the conversation
	 * @param liveWorkItemId
	 * @memberof IConversation
	 * @example
	 * sdk.conversation.getTranscript(liveWorkItemId);
	 */
	getTranscript(liveWorkItemId: string): Promise<ITranscriptMessage[]>;
}
declare class Utility {
	private eventManager;
	constructor(eventManager: any);
	/**
	 * remove event handler by id
	 * @param id - unique id returned by the eventhandler functions
	 * @returns boolean - if removed successfully
	 */
	removeEventHandlerById(id: string): boolean;
}
export interface IHoldChangeEventData {
	liveWorkItemId: string;
	isAgentOnHold: boolean;
}
export interface IMuteChangeEventData {
	isAgentMuted: boolean;
	liveWorkItemId: string;
}
export interface IVoiceVideoCalling {
	/**
	 * @description Listen to hold change event
	 * @param callback
	 * @memberof IVoiceVideoCalling
	 * @example
		sdk.voiceVideoCalling.onHoldChange((data) => {
		* console.log(data);
		* });
  	*/
	onHoldChange(callback: (data: IHoldChangeEventData) => void): string;
	/**
	 * @description Listen to mute change event
	 * @param callback
	 * @memberof IVoiceVideoCalling
	 * @example
		sdk.voiceVideoCalling.onMuteChange((data) => {
		* console.log(data);
		* });
	*/
	onMuteChange(callback: (data: IMuteChangeEventData) => void): string;
}
declare class CCaaSSdk {
	private static instance;
	private presenceModule;
	private conversationModule;
	private voiceVideoCallingModule;
	private utilityModule;
	get presence(): IPresence;
	get conversation(): IConversation;
	get voiceVideoCalling(): IVoiceVideoCalling;
	get utility(): Utility;
	constructor(config: any);
	private createObjects;
}
declare const Microsoft: {
	CCaaS: {
		StandaloneSDK: CCaaSSdk;
	};
};

export {
	Microsoft as default,
};

export {};
